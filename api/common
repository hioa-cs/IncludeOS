// -*-C++-*-

#pragma once

#if !defined(__cplusplus)
#error "IncludeOS must be built with a  C++ compiler"
#endif

#include <sys/types.h>
#include <stddef.h>
#include <stdint.h>


/* We're not building for linux */
#if defined(__linux__)
#warning "You are compiling for Linux target"
#endif
#if defined(_WIN32)
#warning "You are compiling for Win32 target"
#endif

/* We're only doing 32-bit ix86 targets. */
#if !defined(__i386__)
#error "This project needs to be compiled with an ix86-elf compiler"
#endif

#ifndef __includeOS__
#define __includeOS__
#endif

//Unused parameters (necessary for syscall warnings)
#ifdef __GNUC__
#  define UNUSED(x) UNUSED_ ## x __attribute__((__unused__))
#else
#  define UNUSED(x) UNUSED_ ## x
#endif

//Hardware @todo Make this more C++'ish and proper.
#define MAX_NICS 4
#define MAX_DISKS 4 
#define MAX_SERIALS 4


/* LIMITS */
//#define SBRK_MAX 0x10000


//BOCHS Break point
#define BREAK __asm__ volatile("xchg %bx,%bx");

// debugging macros
#include "debug"
#include "warn"
#include "info"
#ifndef __linux__
typedef uint16_t port_t;

static inline int inp(port_t port){
  int ret;
  
  __asm__ volatile("xorl %eax,%eax");
  __asm__ volatile("inb %%dx,%%al"
		   :"=a"(ret)
		   :"d"(port));
  return ret;  
  }

static inline uint16_t inpw(port_t port){
  uint16_t ret;
  __asm__ volatile("xorl %eax,%eax");
  __asm__ volatile("inw %%dx,%%ax"
		   :"=a"(ret)
		   :"d"(port));
  return ret;    
}

static inline uint32_t inpd(port_t port){
  uint32_t ret;
  __asm__ volatile("xorl %eax,%eax");
  __asm__ volatile("inl %%dx,%%eax"
		   :"=a"(ret)
		   :"d"(port));
  
  return ret;
}


static inline void outp(port_t port, uint8_t data){
  __asm__ volatile ("outb %%al,%%dx"::"a" (data), "d"(port));
}
static inline void outpw(port_t port, uint16_t data){
  __asm__ volatile ("outw %%ax,%%dx"::"a" (data), "d"(port));
}
static inline void outpd(port_t port, uint32_t data){
  __asm__ volatile ("outl %%eax,%%dx"::"a" (data), "d"(port));
}

#else
static inline void outpd(char,char){};
static inline int inpd(char,char){};


#endif        



// From sanos, pdir.h
#define PAGESHIFT      12
#define BTOP(x) ((unsigned long)(x) >> PAGESHIFT)
#define PAGESIZE 4096
