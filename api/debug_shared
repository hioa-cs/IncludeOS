// -*-C++-*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2015 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#include <memory>
#include <debug_new>
#include <kernel/syscalls.hpp>

#define ENABLE_SHARED_PTR_DEBUGGING

template <class T>
struct debug_ptr
{
  // copy of shared_ptr
  template<class U,
    class = decltype (std::shared_ptr<T> (std::shared_ptr<U> {}))>
  debug_ptr (std::shared_ptr<U> const& src)
    : sptr (src)  {}
  // owner of pointer
  debug_ptr(T* v)
    : sptr(v) {}
  // owner of pointer with custom deleter
  template <typename Deleter>
  debug_ptr(T* v, Deleter d)
    : sptr(v, d) {}

  T& operator* () {
#ifdef ENABLE_SHARED_PTR_DEBUGGING
    if ((uintptr_t) sptr.get() > 0x8000)
      return *sptr;

    panic("dereferencing nullptr detected");
#endif
    return *sptr;
  }

  std::shared_ptr<T> sptr;
};

// make_shared --> make_debug_shared for the standard deleter case
template <typename T, typename... Args>
inline debug_ptr<T> 
make_debug_shared(Args&&... args)
{
  return debug_ptr<T>(new T(args...));
}
